#cloud-config

write_files:
  # Docker config
  - path: /etc/profile.d/docker-config.sh
    permissions: 0644
    owner: root
    content: |
      export DOCKER_CONFIG=/var/lib/docker/config

  - path: /etc/systemd/system.conf.d/docker-env.conf
    permissions: 0644
    owner: root
    content: |
      [Manager]
      DefaultEnvironment="DOCKER_CONFIG=/var/lib/docker/config"

  - path: /var/lib/toolbox/service/mount-cache.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Mount model cache disk
      After=network-online.target
      Before=llm-service.service

      [Service]
      Type=oneshot
      RemainAfterExit=yes
      EnvironmentFile=/var/lib/toolbox/env/llm.env
      ExecStart=/bin/bash -c '\
        mkdir -p /mnt/disks/model-cache && \
        if ! blkid /dev/disk/by-id/google-${DISK_NAME}; then \
          mkfs.ext4 -m 0 -F -E lazy_itable_init=0,lazy_journal_init=0,discard /dev/disk/by-id/google-${DISK_NAME}; \
        fi && \
        mount -o discard,defaults /dev/disk/by-id/google-${DISK_NAME} /mnt/disks/model-cache && \
        chmod 777 /mnt/disks/model-cache && \
        echo "/dev/disk/by-id/google-${DISK_NAME} /mnt/disks/model-cache ext4 discard,defaults 0 2" >> /etc/fstab'

  - path: /var/lib/toolbox/service/install-gpu.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Install GPU drivers
      Wants=gcr-online.target docker.socket
      After=gcr-online.target docker.socket mount-cache.service

      [Service]
      User=root
      Type=oneshot
      RemainAfterExit=yes
      ExecStart=/usr/bin/cos-extensions install gpu
      StandardOutput=journal+console
      StandardError=journal+console

  - path: /var/lib/toolbox/service/llm-service.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Run LLM container
      Requires=install-gpu.service docker.service mount-cache.service
      After=install-gpu.service docker.service mount-cache.service

      [Service]
      User=root
      Type=simple
      EnvironmentFile=/var/lib/toolbox/env/llm.env
      ExecStart=/bin/bash -c '/usr/bin/docker run --rm \
        --volume /var/lib/nvidia/lib64:/usr/local/nvidia/lib64 \
        --volume /var/lib/nvidia/bin:/usr/local/nvidia/bin \
        --device /dev/nvidia0:/dev/nvidia0 \
        --device /dev/nvidia-uvm:/dev/nvidia-uvm \
        --device /dev/nvidiactl:/dev/nvidiactl \
        --volume /mnt/disks/model-cache:/mnt/disks/model-cache \
        --volume /var/lib/toolbox/env/llm.env:/app/.env:ro \
        -p "${PORT}:${PORT}" \
        "${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:latest"'
      StandardOutput=journal+console
      StandardError=journal+console
      Restart=on-failure
      RestartSec=5s

bootcmd:
  # Create necessary directories
  - mkdir -p /var/lib/docker/config
  - mkdir -p /var/lib/toolbox/service
  - mkdir -p /var/lib/toolbox/env
  - mkdir -p /etc/systemd/system.conf.d
  - mkdir -p /etc/docker

  # Create Docker config with credential helper
  - |
    REGION=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/env-vars" | grep "^REGION=" | cut -d'=' -f2)
    cat > /etc/docker/config.json << EOF
    {
      "credHelpers": {
        "${REGION}-docker.pkg.dev": "gcr"
      }
    }
    EOF

  # Configure docker credentials with correct region
  - |
    REGION=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/env-vars" | grep "^REGION=" | cut -d'=' -f2)
    DOCKER_CONFIG=/var/lib/docker/config docker-credential-gcr configure-docker --registries=${REGION}-docker.pkg.dev

  # Create systemd service links
  - ln -sf /var/lib/toolbox/service/mount-cache.service /etc/systemd/system/
  - ln -sf /var/lib/toolbox/service/install-gpu.service /etc/systemd/system/
  - ln -sf /var/lib/toolbox/service/llm-service.service /etc/systemd/system/

runcmd:
  # First get environment variables
  - |
    echo "Fetching environment variables..."
    metadata_vars=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/env-vars")
    if [ $? -eq 0 ]; then
        echo "$metadata_vars" | tr ',' '\n' > /var/lib/toolbox/env/llm.env
        echo "Environment variables written to llm.env"
    else
        echo "Failed to fetch metadata!"
        exit 1
    fi

  # Then start services in correct order
  - systemctl daemon-reload
  - systemctl restart docker
  - systemctl start mount-cache.service
  - systemctl start install-gpu.service
  - systemctl start llm-service.service
